{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useEffect } from \"react\";\nimport { injectedConnector } from \"../utils/connectors\";\nexport const useEagerConnect = setErrorMessageFun => {\n  _s();\n\n  const {\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    (async () => {\n      const isAuthorized = await injectedConnector.isAuthorized();\n      console.log(\"isAuthorized= \", isAuthorized);\n\n      if (isAuthorized) {\n        await activate(injectedConnector, async error => {\n          console.log({\n            error\n          });\n          setErrorMessageFun(error.message);\n        });\n      }\n    })();\n  }, [activate, setErrorMessageFun]);\n};\n\n_s(useEagerConnect, \"yLsw3Lm9RF+5Ui45/079dY6zwu8=\", false, function () {\n  return [useWeb3React];\n});\n\nexport const useInactiveListener = (suppress = false) => {\n  _s2();\n\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3React();\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = chainId => {\n        console.log('chainChanged', chainId);\n        activate(injectedConnector);\n      };\n\n      const handleAccountsChanged = accounts => {\n        console.log('accountsChanged', accounts);\n\n        if (accounts.length > 0) {\n          activate(injectedConnector);\n        }\n      };\n\n      const handleNetworkChanged = networkId => {\n        console.log('networkChanged', networkId);\n        activate(injectedConnector);\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      };\n    }\n\n    return () => {};\n  }, [active, error, suppress, activate]);\n};\n\n_s2(useInactiveListener, \"tg+LUTCYzAVRTYzC32Q8yta1BMA=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/zubair/Documents/office/Dapps/miami_real_estate/src/hooks/useEagerConnect.js"],"names":["useWeb3React","useEffect","injectedConnector","useEagerConnect","setErrorMessageFun","activate","isAuthorized","console","log","error","message","useInactiveListener","suppress","active","ethereum","window","on","handleChainChanged","chainId","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAIA,OAAO,MAAMC,eAAe,GAAIC,kBAAD,IAAsB;AAAA;;AACjD,QAAM;AAACC,IAAAA;AAAD,MAAaL,YAAY,EAA/B;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAU;AACP,YAAMK,YAAY,GAAG,MAAMJ,iBAAiB,CAACI,YAAlB,EAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BF,YAA7B;;AACA,UAAGA,YAAH,EAAiB;AACb,cAAMD,QAAQ,CAACH,iBAAD,EAAoB,MAAOO,KAAP,IAAiB;AAC/CF,UAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,YAAAA;AAAF,WAAZ;AACAL,UAAAA,kBAAkB,CAACK,KAAK,CAACC,OAAP,CAAlB;AACH,SAHa,CAAd;AAIH;AACJ,KATD;AAUH,GAXQ,EAWP,CAACL,QAAD,EAAUD,kBAAV,CAXO,CAAT;AAYH,CAfM;;GAAMD,e;UACUH,Y;;;AAgBvB,OAAO,MAAMW,mBAAmB,GAAG,CAACC,QAAQ,GAAG,KAAZ,KAAqB;AAAA;;AACpD,QAAM;AAAEC,IAAAA,MAAF;AAAUJ,IAAAA,KAAV;AAAiBJ,IAAAA;AAAjB,MAA8BL,YAAY,EAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEa,MAAAA;AAAF,QAAeC,MAArB;;AACA,QAAID,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACH,MAA5B,IAAsC,CAACJ,KAAvC,IAAgD,CAACG,QAArD,EAA+D;AAC3D,YAAMK,kBAAkB,GAAIC,OAAD,IAAa;AACpCX,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,OAA5B;AACAb,QAAAA,QAAQ,CAACH,iBAAD,CAAR;AACH,OAHD;;AAKA,YAAMiB,qBAAqB,GAAIC,QAAD,IAAc;AACxCb,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BY,QAA/B;;AACA,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACrBhB,UAAAA,QAAQ,CAACH,iBAAD,CAAR;AACH;AACJ,OALD;;AAOA,YAAMoB,oBAAoB,GAAIC,SAAD,IAAe;AACxChB,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Be,SAA9B;AACAlB,QAAAA,QAAQ,CAACH,iBAAD,CAAR;AACH,OAHD;;AAKAY,MAAAA,QAAQ,CAACE,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAH,MAAAA,QAAQ,CAACE,EAAT,CAAY,iBAAZ,EAA+BG,qBAA/B;AACAL,MAAAA,QAAQ,CAACE,EAAT,CAAY,gBAAZ,EAA8BM,oBAA9B;AAEA,aAAO,MAAM;AACT,YAAIR,QAAQ,CAACU,cAAb,EAA6B;AAC7BV,UAAAA,QAAQ,CAACU,cAAT,CAAwB,cAAxB,EAAwCP,kBAAxC;AACAH,UAAAA,QAAQ,CAACU,cAAT,CAAwB,iBAAxB,EAA2CL,qBAA3C;AACAL,UAAAA,QAAQ,CAACU,cAAT,CAAwB,gBAAxB,EAA0CF,oBAA1C;AACC;AACJ,OAND;AAOH;;AACD,WAAO,MAAM,CAAE,CAAf;AACH,GAjCQ,EAiCN,CAACT,MAAD,EAASJ,KAAT,EAAgBG,QAAhB,EAA0BP,QAA1B,CAjCM,CAAT;AAkCH,CArCM;;IAAMM,mB;UAC2BX,Y","sourcesContent":["import { useWeb3React } from \"@web3-react/core\"\nimport { useEffect } from \"react\";\nimport { injectedConnector } from \"../utils/connectors\";\n\n\n\nexport const useEagerConnect = (setErrorMessageFun)=>{\n    const {activate} = useWeb3React();\n    \n    useEffect(()=>{\n        (async ()=>{\n            const isAuthorized = await injectedConnector.isAuthorized();\n            console.log(\"isAuthorized= \",isAuthorized);\n            if(isAuthorized) {\n                await activate(injectedConnector, async (error) => {\n                    console.log({ error });\n                    setErrorMessageFun(error.message);\n                });\n            }\n        })();\n    },[activate,setErrorMessageFun])\n}\n\nexport const useInactiveListener = (suppress = false) =>{\n    const { active, error, activate } = useWeb3React();\n\n    useEffect(() => {\n        const { ethereum } = window;\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleChainChanged = (chainId) => {\n                console.log('chainChanged', chainId);\n                activate(injectedConnector);\n            };\n\n            const handleAccountsChanged = (accounts) => {\n                console.log('accountsChanged', accounts);\n                if (accounts.length > 0) {\n                    activate(injectedConnector);\n                }\n            };\n\n            const handleNetworkChanged = (networkId) => {\n                console.log('networkChanged', networkId);\n                activate(injectedConnector);\n            };\n\n            ethereum.on('chainChanged', handleChainChanged);\n            ethereum.on('accountsChanged', handleAccountsChanged);\n            ethereum.on('networkChanged', handleNetworkChanged);\n\n            return () => {\n                if (ethereum.removeListener) {\n                ethereum.removeListener('chainChanged', handleChainChanged);\n                ethereum.removeListener('accountsChanged', handleAccountsChanged);\n                ethereum.removeListener('networkChanged', handleNetworkChanged);\n                }\n            };\n        }\n        return () => {};\n    }, [active, error, suppress, activate]);\n}"]},"metadata":{},"sourceType":"module"}